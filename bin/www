#!/usr/bin/env node

const nconf = require('nconf');
const app = require('../app');
const MongoDB = require('../src/MongoDB');
const debug = require('debug')('quiz:server');
const http = require('http');
const argv = require('yargs').argv;

argv.config = argv.config || 'config/config.json';
argv.secretConfig = argv.secretConfig || 'config/secret-config.json';

nconf.argv().env().file({ file: argv.config });
nconf.file('custom', argv.secretConfig);

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
const mongoDB = new MongoDB(
    nconf.get('MongoUri'),
    nconf.get('MongoDatabase'),
    nconf.get('MongoUsername'),
    nconf.get('MongoPassword')
);

mongoDB.connect((error) => {
    if (error) {
        throw error;
    }

    startListening(mongoDB);
});

function startListening(mongoDB) {
    app.use((req, res, next) => {
        req.db = mongoDB;
        next();
    });

    app.setRouting();
    app.setErrorHandling();

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;

        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;

        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
