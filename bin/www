#!/usr/bin/env node

const nconf = require('nconf');
const app = require('../app');
const MongoDB = require('../src/MongoDB');
const debug = require('debug')('quiz:server');
const http = require('http');
const argv = require('yargs').argv;
const passport = require('passport');
const expressSession = require('express-session');
const LocalStrategy = require('passport-local');
const bCrypt = require('bcrypt');
const User = require('../src/User');
const flash = require('req-flash');


argv.config = argv.config || 'config/config.json';
argv.secretConfig = argv.secretConfig || 'config/secret-config.json';

nconf.argv().env().file({ file: argv.config });
nconf.file('custom', argv.secretConfig);


// passport
const sessionSecret = nconf.get('ExpressSessionSecret') || 'mySecretKey';
app.use(expressSession({secret: sessionSecret}));
app.use(passport.initialize());
app.use(passport.session());

// flash - no not that flash
app.use(flash());

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
const mongoDB = new MongoDB(
    nconf.get('MongoUri'),
    nconf.get('MongoDatabase'),
    nconf.get('MongoUsername'),
    nconf.get('MongoPassword')
);

mongoDB.connect((error) => {
    if (error) {
        throw error;
    }

    startListening(mongoDB);
});

passport.serializeUser((user, done) => {
    done(null, user._id);
});

passport.deserializeUser((id, done) => {
    mongoDB.getUser(
        { _id: id }, 
        (error, user) => {
            done(error, user);
    });
});

passport.use('login', 
    new LocalStrategy({
        passReqToCallback: true
    },
    (req, username, password, done) => {
        mongoDB.getUser(
            { username: username },
            (error, user) => {
                if (error) {
                    return done(error);
                }

                if (!user) {
                    console.error(`Username '${username}' not found`);
                    return done(null, false, req.flash('message', 'User not found'));
                }
                if (!isValidPassword(user, password)) {
                    console.error('Invalid password');
                    return done(null, false, req.flash('message', 'Invalid password'));
                }
                return done(null, user);
            }
        );
    })
);

function isValidPassword(user, password) {
    return bCrypt.compareSync(password, user.password);
}

function createHash(password) {
    return bCrypt.hashSync(password, bCrypt.getSaltSync(10), null);
}

passport.use('signup', 
    new LocalStrategy({
        passReqToCallback: true
    },
    (req, username, password, done) => {
        const findOrCreateUser = () => {
            mongoDB.getUser(
                { username: username },
                (error, user) => {
                    if (error) {
                        console.error(`Error during signup: ${error}`);
                        return done(error);
                    }
                    if (user) {
                        console.error(`User '${username}' already exists`);
                        return done(null, false, req.flash('message', 'User already exists'));
                    } else {
                        const newUser = new User({
                            username: username,
                            passwordHash: createHash(password),
                            email: req.param('email'),
                            firstName: req.param('firstName'),
                            lastName: req.param('lastName')
                        });

                        mongoDB.storeUser(newUser, (error) => {
                            if (error) {
                                return done(error);
                            }
                            done(null, newUser);
                        });
                    }
                }
            );
        };

        process.nextTick(findOrCreateUser);
    })
);

function startListening(mongoDB) {
    app.use((req, res, next) => {
        req.db = mongoDB;
        next();
    });

    app.setRouting();
    app.setErrorHandling();

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;

        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;

        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
